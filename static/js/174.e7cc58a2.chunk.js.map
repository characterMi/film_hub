{"version":3,"file":"static/js/174.e7cc58a2.chunk.js","mappings":"4IAGO,MAAMA,EAAgBA,KAC3B,MAAOC,IAAgBC,EAAAA,EAAAA,MACjBC,EAAuBF,EAAaG,IAAI,SACvCC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAUJ,GAAwB,GAUxE,OARAK,EAAAA,EAAAA,YAAU,KAENF,EADEH,GAAwBA,EAAuB,GACjCA,EAED,EACjB,GACC,CAACA,IAEG,CAACE,EAAaC,EAAe,C,oGCJtC,MA2CA,EA3CeG,IAAgB,IAADC,EAAAC,EAAAC,EAAA,IAAd,MAAEC,GAAOJ,EACvB,MAAOJ,EAAaC,IAAkBN,EAAAA,EAAAA,MAChC,sBAAEc,EAAqB,YAAEC,IAAgBC,EAAAA,EAAAA,KAC5CC,GAAUA,EAAMC,0BAEb,KAAEC,EAAI,MAAEC,EAAK,WAAEC,IAAeC,EAAAA,EAAAA,IAAkB,CACpDR,wBACAS,KAAMlB,EACNU,gBAGF,OAAIM,GAAmBG,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,KAAK,SAEhCN,GAAcI,EAAAA,EAAAA,KAACG,EAAAA,GAAK,CAACC,KAAK,2BAErB,OAAJT,QAAI,IAAJA,GAAa,QAATT,EAAJS,EAAMU,eAAO,IAAAnB,GAAbA,EAAeoB,QAelBC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACER,EAAAA,EAAAA,KAACS,EAAAA,GAAW,CAACC,MAAW,OAAJf,QAAI,IAAJA,OAAI,EAAJA,EAAMU,QAAQ,MAClCL,EAAAA,EAAAA,KAACW,EAAAA,GAAS,CAACC,OAAqB,QAAfzB,EAAM,OAAJQ,QAAI,IAAJA,OAAI,EAAJA,EAAMU,eAAO,IAAAlB,EAAAA,EAAI,GAAIE,MAAOA,KAC/CW,EAAAA,EAAAA,KAACa,EAAAA,GAAU,CACTC,cAAgC,QAAnB1B,EAAM,OAAJO,QAAI,IAAJA,OAAI,EAAJA,EAAMoB,mBAAW,IAAA3B,EAAAA,EAAI,EACpCP,YAAaA,EACbC,eAAgBA,EAChBO,MAAOA,QApBTW,EAAAA,EAAAA,KAACG,EAAAA,GAAK,CACJC,MACEG,EAAAA,EAAAA,MAAAS,EAAAA,SAAA,CAAAR,SAAA,CAAE,mCAEAR,EAAAA,EAAAA,KAAA,SAAM,wCAkBR,C","sources":["hooks/usePagination.js","pages/Movies.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\n\r\nexport const usePagination = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const pageFromSearchParams = searchParams.get(\"page\");\r\n  const [currentPage, setCurrentPage] = useState(+pageFromSearchParams || 1);\r\n\r\n  useEffect(() => {\r\n    if (pageFromSearchParams && pageFromSearchParams > 0) {\r\n      setCurrentPage(+pageFromSearchParams);\r\n    } else {\r\n      setCurrentPage(1);\r\n    }\r\n  }, [pageFromSearchParams]);\r\n\r\n  return [currentPage, setCurrentPage];\r\n};\r\n","import { useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  Error,\r\n  Loader,\r\n  MovieList,\r\n  MoviePoster,\r\n  Pagination,\r\n} from \"../components\";\r\nimport { usePagination } from \"../hooks/usePagination\";\r\nimport { useGetMoviesQuery } from \"../services/TMDB\";\r\n\r\nconst Movies = ({ theme }) => {\r\n  const [currentPage, setCurrentPage] = usePagination();\r\n  const { genreIdOrCategoryName, searchQuery } = useSelector(\r\n    (state) => state.currentGenreOrCategory\r\n  );\r\n  const { data, error, isFetching } = useGetMoviesQuery({\r\n    genreIdOrCategoryName,\r\n    page: currentPage,\r\n    searchQuery,\r\n  });\r\n\r\n  if (isFetching) return <Loader size=\"4rem\" />;\r\n\r\n  if (error) return <Error text=\"An error has occurred.\" />;\r\n\r\n  if (!data?.results?.length) {\r\n    return (\r\n      <Error\r\n        text={\r\n          <>\r\n            no movies that match that name.\r\n            <br />\r\n            Please search for something else.\r\n          </>\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <MoviePoster movie={data?.results[0]} />\r\n      <MovieList movies={data?.results ?? []} theme={theme} />\r\n      <Pagination\r\n        numberOfPages={data?.total_pages ?? 0}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        theme={theme}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n"],"names":["usePagination","searchParams","useSearchParams","pageFromSearchParams","get","currentPage","setCurrentPage","useState","useEffect","_ref","_data$results","_data$results2","_data$total_pages","theme","genreIdOrCategoryName","searchQuery","useSelector","state","currentGenreOrCategory","data","error","isFetching","useGetMoviesQuery","page","_jsx","Loader","size","Error","text","results","length","_jsxs","children","MoviePoster","movie","MovieList","movies","Pagination","numberOfPages","total_pages","_Fragment"],"sourceRoot":""}